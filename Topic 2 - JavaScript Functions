# JavaScript Functions
## Introduction to Functions
• **Definition**: A function is a reusable block of code that performs a specific task. It
helps in organizing code and avoiding redundancy.
• **Basic Syntax**:
~~~
function functionName(parameters) {
// code to be executed
}
~~~

## 1. Function Declarations
Learn to declare and call functions.

Function Declaration Example:
~~~
// Basic example of a function that takes two numbers and returns their sum:
function add(a, b) {
return a + b;
}
console.log(add(5, 3)); // Outputs: 8
~~~

#### 2. Calling Functions:
Functions are "called" or "invoked" by using their name followed by parentheses with any necessary arguments inside.

**Example** - Function with Default Parameters:
~~~
//Default parameters allow setting a default value if no argument is provided.
function greet(name = "Student") {
    console.log("Hello, " + name + "!");
}
greet(); // Outputs: Hello, Student!
greet("Alice"); // Outputs: Hello, Alice!
~~~

Introduction to Arrow Functions
Understand ES6 arrow functions and when to use them.
1. Basic Syntax:
o Arrow functions provide a more concise syntax than traditional function
declarations.
const add = (a, b) => a + b;
console.log(add(4, 6)); // Outputs: 10
2. Single Parameter Example:
o Arrow functions without parentheses for single parameters:
const greet = name => console.log("Hi, " + name);
greet("Sam"); // Outputs: Hi, Sam
3. Arrow Function with No Parameters:
const greetWorld = () => console.log("Hello, World!");
greetWorld(); // Outputs: Hello, World!
Scope in JavaScript
Goal: Understand the differences between var, let, and const, and the concept of scope in
JavaScript.
1. Global Scope:
o Variables declared outside of a function are globally scoped and accessible
anywhere in the code.
let name = "Global";
function showName() {
console.log(name);
}
showName(); // Outputs: Global
2. Function Scope (using var):
o Variables declared with var inside a function are function-scoped and cannot
be accessed outside the function.
function testVar() {
var test = "Hello";
console.log(test); // Outputs: Hello
}
testVar();
console.log(test); // Error: test is not defined
3. Block Scope (let and const):
o Variables declared with let and const are block-scoped, meaning they are
limited to the block {} they’re defined in.
if (true) {
let blockVar = "I'm block-scoped";
const blockConst = "Me too!";
console.log(blockVar); // Outputs: I'm block-scoped
}
console.log(blockVar); // Error: blockVar is not defined
4. Practical Example of Scope:
function checkScope() {
var functionScoped = "Inside function";
if (true) {
let blockScoped = "Inside block";
console.log(blockScoped); // Outputs: Inside block
}
console.log(functionScoped); // Outputs: Inside function
}
Practice Challenge
Create a function that uses the different scopes and an arrow function.
1. Challenge:
o Create a function createCounter that uses a let variable inside a function
and returns an arrow function to increment it.
o Expected Output:
const counter = createCounter();
console.log(counter()); // Outputs: 1
console.log(counter()); // Outputs: 2
